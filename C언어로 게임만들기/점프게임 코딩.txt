//**********************************************************
#include <stdio.h>
#include <time.h>
#include <conio.h>
#include <windows.h>
#include <stdlib.h>
#define size_x 30
#define size_y 10
#define c_y size_y-2 //내 위치 
#define c_x 2
#define spd 100 //속도 초기값 
#define oti 501 //장애물 재로딩 초기값 
//**********************************************************
int map[size_y][size_x]; //전역변수
int speed=spd;
int score=0;
int otime=oti;
//**********************************************************
void openscreen();
void mapbase();
void mapping();
void jump(int a);
void obstaclemaker();
void obstaclemove();
int gameover();
void Score();
int endscreen();
int eventscreen();
//메인******************************************************
int main()
{
	int run=1;
	
	srand((unsigned)time(NULL));
	
	openscreen();
	
	while(run)
	{
		obstaclemove();
		run=endscreen();
		score=0;
	}
	
	return 0;
}
//시작 화면*************************************************
void openscreen()
{
	printf("                                                         \n");
	printf("          □□□  □    □ □      □  □□□            \n");
	printf("              □  □    □ □□  □□ □    □           \n");
	printf("              □  □    □ □  □  □ □    □           \n");
	printf("             □   □    □ □  □  □ □□□             \n");
	printf("           □       □□   □  □  □ □                 \n");
	printf("                                      □                 \n");
	printf("                 □□□       □      □      □ □□□□\n");
	printf("               □            □□     □□  □□ □      \n");
	printf("               □  □□□   □  □    □  □  □ □□□□\n");
	printf("               □      □  □□□□   □  □  □ □      \n");
	printf("                 □□□   □      □  □  □  □ □□□□\n");
	printf("                                                         \n");
	printf("                   게임 로딩중입니다.                    \n");
	printf("                                                         \n");
	Sleep(5000);
	mapbase();
	system("cls");
	mapping();
} 
//맵베이스**************************************************
void mapbase()
{
	for(int i=0;i<size_y;i++)
	{
		for(int j=0;j<size_x;j++)
		{
			if(i==(size_y-1))
			map[i][j]=1;
			
			else
			map[i][j]=0;
		}
	}
	
	map[c_y][c_x]=2;
}
//맵핑******************************************************
void mapping()
{
	printf("□□□□□□□□□□□□□□□□□□□□□□□□□□□\n");
	for(int i=0;i<size_y;i++)
	{
		printf("□");
		for(int j=0;j<size_x-5;j++)
		{
			if(map[i][j]==0)
			printf("  ");
			
			if(map[i][j]==1)
			printf("□");
			
			if(map[i][j]==2)
			printf("○");
			
			if(map[i][j]==3)
			printf("□");
		}
		printf("□");
		if(i==1)
		printf(" Score : %d", score/2);
		
		if(i==5)
		printf(" 점프 키 : j 키");
		
		printf("\n");
	}
	if(score>=1000)
	{
		printf("□□□□□□□□□□□□□□□□□\n");
		printf("□  □□□              □□□  □\n");
		printf("□ □    □            □    □ □\n");
		printf("□□      □          □      □□\n");
		printf("□         □        □         □\n");
		printf("□      □□□      □□□      □\n");
	}
	if(score>=2000)
	{
		printf("□     □    □    □    □     □\n");
		printf("□     □     □□□     □     □\n");
		printf("□      □    □  □    □      □\n");
		printf("□        □□      □□        □\n");
		printf("□                              □\n");
		printf("□  □□□              □□□  □\n");
	}
	if(score>=3000)
	{
		printf("□ □    □□□□□□□□    □ □\n");
		printf("□ □                        □ □\n");
		printf("□ □                        □ □\n");
		printf("□ □    □□□□□□□□    □ □\n");
		printf("□  □□□              □□□  □\n");
		printf("□□□□□□□□□□□□□□□□□\n");
	}
	/*실험용 맵
	printf("\n\n\n");
	for(int i=0;i<size_y;i++)
	{
		for(int j=0;j<size_x;j++)
		{
			if(map[i][j]==0)
			printf("%d",map[i][j]);
			
			if(map[i][j]==1)
			printf("%d",map[i][j]);
			
			if(map[i][j]==2)
			printf("%d",map[i][j]);
			
			if(map[i][j]==3)
			printf("%d",map[i][j]);
		}
		printf("\n");
	}*/
}
//점프*******************************************************
void jump(int cot)
{
	int cx,cy;
	
	for(int i=0;i<size_y;i++)
	{
		for(int j=0;j<size_x;j++)
		{
			if(map[i][j]==2)
			{
				cx=j;
				cy=i;
			}
		}
	}
	
	if(cot<4)
	{
		if(map[cy-1][cx]==3)
		map[cy][cx]=0;
		else
		{
			map[cy-1][cx]=2;map[cy][cx]=0;
			mapping();
		}
	}
	if(cot>=4)
	{
		if(map[cy+1][cx]==3)
		map[cy][cx]=0;
		else
		{
			map[cy][cx]=0;map[cy+1][cx]=2;
			mapping();
		}
	}
}
//장애물**********************************************************
void obstaclemaker()
{
	int b;
	int obs[5][size_y-1];
	
	b=rand()%4;
	
	if(b==0)
	{
		obs[b][size_y-10]=0;
		obs[b][size_y-9]=0;
		obs[b][size_y-8]=0;
		obs[b][size_y-7]=0;
		obs[b][size_y-6]=0;
		obs[b][size_y-5]=0;
		obs[b][size_y-4]=0;
		obs[b][size_y-3]=0;
		obs[b][size_y-2]=3;
		for(int i=0;i<size_y-1;i++)
		{
			map[i][size_x-1]=obs[b][i];
		}
	}
	if(b==1)
	{
		obs[b][size_y-10]=0;
		obs[b][size_y-9]=0;
		obs[b][size_y-8]=0;
		obs[b][size_y-7]=0;
		obs[b][size_y-6]=0;
		obs[b][size_y-5]=0;
		obs[b][size_y-4]=0;
		obs[b][size_y-3]=3;
		obs[b][size_y-2]=3;
		for(int i=0;i<size_y-1;i++)
		{
			map[i][size_x-1]=obs[b][i];
		}
	}
	if(b==2)
	{
		obs[b][size_y-10]=0;
		obs[b][size_y-9]=0;
		obs[b][size_y-8]=0;
		obs[b][size_y-7]=0;
		obs[b][size_y-6]=0;
		obs[b][size_y-5]=0;
		obs[b][size_y-4]=0;
		obs[b][size_y-3]=3;
		obs[b][size_y-2]=0;
		for(int i=0;i<size_y-1;i++)
		{
			map[i][size_x-1]=obs[b][i];
		}
	}
	if(b==3)
	{
		obs[b][size_y-10]=3;
		obs[b][size_y-9]=3;
		obs[b][size_y-8]=3;
		obs[b][size_y-7]=3;
		obs[b][size_y-6]=3;
		obs[b][size_y-5]=3;
		obs[b][size_y-4]=3;
		obs[b][size_y-3]=0;
		obs[b][size_y-2]=0;
		for(int i=0;i<size_y-1;i++)
		{
			map[i][size_x-1]=obs[b][i];
		}
	}
}
//장애물 무빙*****************************************************
void obstaclemove()
{
	int obstime/*장애물 재로딩 시간*/, run2=1, k, cot=1, time=0, ctime=0;
	//점프할 때 좀 더 매끄럽게 하기위해 점프 동작이 끝나면 계속 0으로 초기화시켜줌  
	obstime=rand()%otime+otime-100; //첫 장애물 생성 
	
	while(run2)
	{
		//점프키를 눌렀을 때
		if(kbhit())
		{
			k=getch();
			//p는 점수 오르는 키(점수에 따른 이벤트 발생 여부 확인을 위해 만듬), 이거 해도 속도는 증가 ㄴㄴ 
			if(k=='p')
			score+=1000;
			
			if(k=='j')
			{
				while(cot<=6)
				{
					//나 
					if(cot==1)
					{
						system("cls");
						jump(cot);
						++cot;
						Sleep(30);
					}
					if((time%25)==0&&cot>1)
					{
						system("cls");
						jump(cot);
						if(cot==6)
						time=0;
						++cot;
					}
					
					//장애물 
					if((time%22)==0)
					{
						++score; //점수
						Score();
						for(int i=0;i<size_y-1;i++)
						{
							for(int j=0;j<size_x;j++)
							{
								if(j!=0&&map[i][j]!=2&&(map[i][j-1]!=2||map[i][j]==3))
								{
									map[i][j-1]=map[i][j];
									map[i][j]=0;
								}
							}
						}
						system("cls");
						mapping();
						Sleep(speed);
					}
					
					//둘이 겹쳤을 때
					run2=gameover();
					if(run2==0)
					break;
					
					//장애물 생성 
					if((ctime%obstime)==0)
					{
						obstaclemaker();
						system("cls");
						mapping();
						ctime=0; 
						obstime=rand()%otime+otime-100;
					}
					time++;
					ctime++;
				}
				cot=1;
			}
		}
		
		
		//점프 키를 안눌렀을 때
		
		//장애물 
		if((time%22)==0)
		{
			++score; //점수
			Score();
			for(int i=0;i<size_y-1;i++)
			{
				for(int j=0;j<size_x;j++)
				{
					if(j!=0&&map[i][j]!=2&&(map[i][j-1]!=2||map[i][j]==3))
					{
							map[i][j-1]=map[i][j];
							map[i][j]=0;
					}
				}
			}
			system("cls");
			mapping();
			Sleep(speed);
		}
		
		//둘이 겹쳤을 때 
		run2=gameover();
		
		//장애물 생성 
		if((ctime%obstime)==0)
		{
			obstaclemaker();
			system("cls");
			mapping();
			ctime=0;
			obstime=rand()%otime+otime-100;
		}
		time++;
		ctime++;
	}
	speed=spd;
	otime=oti;
}
//장애물에 맞았을 때**************************************************
int gameover()
{
	for(int i=0;i<size_y;i++)
	{
		for(int j=0;j<size_x;j++)
		{
			if(map[i][j]==2)
			return 1;
			
			if(i==size_y-1&&j==size_x-1&&map[i][j]!=2)
			{
				system("cls");
				mapping();
				return 0;
			}
		}
	}
}
//몇 점 이상 올라가면 스피드 조절**************************************  
void Score()
{
	if((score%100)==0&&speed>20)
	{
		speed-=5;
		otime-=20;
	}
	if((score%100)==0&&speed<=10)
	speed--;
}
//끝나는 화면**********************************************************
int endscreen()
{
	int answer;
	
	system("cls");
	printf("\n\t\tGame over~~\n\n\t       You score : %d\n\n",score/2);
	printf("\n\t\t re game?\n\n");
	printf("\n\t\t 1.go\n\n");
	printf("\n\t\t 2.exit\n");
	scanf("%d", &answer);
	if(answer==1)
	{
		system("cls");
		mapbase();
		mapping();
		return 1;
	}
	else if(answer==8282)
	{
		speed=10;
		otime=181;
		system("cls");
		mapbase();
		mapping();
		return 1;
	}
	else
	{
		system("cls");
		return 0;
	}
}
//이벤트 화면*************************************************************
int eventscreen()
{
	
	
	return 0;
}